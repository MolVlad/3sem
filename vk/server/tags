!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACKLOG	includes/user_communication.h	5;"	d
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra$/;"	m
COMP	Makefile	/^COMP = gcc$/;"	m
DEFINES	Makefile	/^DEFINES =$/;"	m
INIT	includes/state.h	/^	INIT = 0,$/;"	e	enum:ServerState
LIBS	Makefile	/^LIBS = -lpthread$/;"	m
OBJS	Makefile	/^OBJS = $(SOURCES:.c=.o)$/;"	m
PRECOMP_OBJ	Makefile	/^PRECOMP_OBJ = $(PRECOMP:.h=.h.gch)$/;"	m
PROJECT	Makefile	/^PROJECT = server$/;"	m
REQUEST_NUMBER	src/main.c	11;"	d	file:
RM	Makefile	/^RM = rm -rf$/;"	m
SOURCES	Makefile	/^SOURCES = src\/main.c ..\/libs\/src\/my_string.c src\/user_communication.c src\/handler_communication.c src\/zombie.c src\/state.c ..\/libs\/src\/fifo.c$/;"	m
ServerState	includes/state.h	/^enum ServerState$/;"	g
WAITING_REQUESTS	includes/state.h	/^	WAITING_REQUESTS,$/;"	e	enum:ServerState
__CONFIG_H__	includes/config.h	2;"	d
__GLOBAL_H__	includes/global.h	2;"	d
__HANDLER_COMMUNICATION_H__	includes/handler_communication.h	2;"	d
__STATE_H__	includes/state.h	2;"	d
__USER_COMMUNICATION_H__	includes/user_communication.h	2;"	d
__ZOMBIE_H__	includes/zombie.h	2;"	d
checkAccount	src/handler_communication.c	/^Flag checkAccount(String * login, String * password, int fifo)$/;"	f
createAccount	src/handler_communication.c	/^Flag createAccount(String * login, String * password, int fifo)$/;"	f
createThreadToFightZombie	src/zombie.c	/^int createThreadToFightZombie()$/;"	f
fifo	src/main.c	/^int fifo;$/;"	v
functionToFightZombies	src/zombie.c	/^void *functionToFightZombies()$/;"	f
handlerPid	src/main.c	/^int handlerPid;$/;"	v
main	src/main.c	/^int main()$/;"	f
raiseServer	src/user_communication.c	/^int raiseServer()$/;"	f
replyViaNet	src/user_communication.c	/^void replyViaNet(enum ReverseMessageType type, int newsockfd)$/;"	f
scanHeader	src/user_communication.c	/^int scanHeader(HeaderMessageStruct * header, int newsockfd)$/;"	f
sendList	src/user_communication.c	/^void sendList(int newsockfd)$/;"	f
sendReply	src/user_communication.c	/^int sendReply(Flag flag, int newsockfd)$/;"	f
sendToHandler	src/handler_communication.c	/^Flag sendToHandler(String * recipient, String * data, int fifo)$/;"	f
serverFiniteStateMachine	src/state.c	/^Flag serverFiniteStateMachine(HeaderMessageStruct * header, int newsockfd)$/;"	f
sigHandler	src/main.c	/^void sigHandler(int nsig)$/;"	f
